package postgresql

import (
	"database/sql"

	// "errors
	"fmt"

	errs "github.com/DblMOKRQ/Url-Shortener/internal/http-server/api/errs"
	"github.com/lib/pq"
	_ "github.com/lib/pq"
)

// TODO: Вынести в отдельный пакет методы
type Storage struct {
	db *sql.DB
}

const (
	ErrCodeUniqueViolation = "23505"
)

func New(user, password, dbname, sslmode string) (*Storage, error) {
	const operation = "storage.postgreSQL.New"
	connStr := fmt.Sprintf("user=%s password=%s dbname=%s sslmode=%s", user, password, dbname, sslmode)
	db, err := sql.Open("postgres", connStr)
	if err != nil {
		return nil, fmt.Errorf("%s.open:%w", operation, err)
	}

	stmt, err := db.Prepare(
		`CREATE TABLE IF NOT EXISTS url(
		id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
		alias TEXT NOT NULL UNIQUE,
		url TEXT NOT NULL);
	
	    `)
	if err != nil {
		return nil, fmt.Errorf("%s.prepare:%w", operation, err)
	}
	defer stmt.Close()
	if _, err = stmt.Exec(); err != nil {
		return nil, fmt.Errorf("%s.exec:%w", operation, err)
	}
	return &Storage{db: db}, nil
}

func (s *Storage) SaveUrl(urlToSave string, alias string) error {
	const operation = "storage.postgresSQL.SaveUrl"
	_, err := s.db.Exec("INSERT INTO url(url,alias) VALUES($1, $2)", urlToSave, alias)
	if err != nil {
		if err.(*pq.Error).Code == ErrCodeUniqueViolation {
			return errs.ErrDuplicateAlias
		}
		return errs.ErrFailendToSend
	}
	return nil

}
func (s *Storage) GetUrl(alias string) (string, error) {
	const op = "storage.postgresql.GetURL"

	stmt, err := s.db.Prepare("SELECT url FROM url WHERE alias = $1")
	if err != nil {
		return "", fmt.Errorf("%s: prepare statement: %w", op, err)
	}
	defer stmt.Close()
	var resURL string

	err = stmt.QueryRow(alias).Scan(&resURL)
	if err != nil {
		return "", err
	}

	return resURL, nil
}

func (s *Storage) DeleteUrl(alias string) error {
	const op = "storage.postgresql.DeleteURL"
	if err := s.UrlExists(alias); err != nil {
		return err
	}
	stmt, err := s.db.Prepare("DELETE FROM url WHERE alias = $1")
	if err != nil {
		return fmt.Errorf("%s: prepare statement: %w", op, err)
	}

	defer stmt.Close()
	_, err = stmt.Exec(alias)
	if err != nil {
		return fmt.Errorf("%s: exec statement: %w", op, err)
	}
	return nil
}

func (s *Storage) UrlExists(alias string) error {
	const op = "storage.postgresql.UrlExists"
	_, err := s.GetUrl(alias)
	if err != nil {
		return err
	}
	return nil
}

func (s *Storage) Close() error {
	return s.db.Close()
}
